name: E2E Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allow manual trigger

jobs:
  e2e-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: tests/e2e/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('tests/e2e/package-lock.json', 'tests/e2e/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET application
      run: dotnet build --no-restore

    - name: Install E2E test dependencies
      working-directory: tests/e2e
      run: |
        # Generate package-lock.json if it doesn't exist, otherwise use npm ci
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, running npm install"
          npm install
        else
          echo "package-lock.json found, running npm ci"
          npm ci
        fi

    - name: Install Playwright browsers
      working-directory: tests/e2e
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Setup test environment
      run: |
        # Create necessary directories
        mkdir -p data
        mkdir -p uploads
        mkdir -p keys
        mkdir -p logs
        
        # Set permissions
        chmod 755 data uploads keys logs

    - name: Start MailHog (Mock SMTP server)
      run: |
        # Install and start MailHog for email testing
        wget -q https://github.com/mailhog/MailHog/releases/download/v1.0.1/MailHog_linux_amd64
        chmod +x MailHog_linux_amd64
        ./MailHog_linux_amd64 &
        sleep 2
        echo "MailHog started on port 1025 (SMTP) and 8025 (Web UI)"

    - name: Run Playwright tests
      working-directory: tests/e2e
      env:
        # Application configuration for testing
        ASPNETCORE_ENVIRONMENT: Testing
        ASPNETCORE_URLS: http://localhost:5000
        
        # Database configuration (use SQLite in-memory for tests)
        ConnectionStrings__DatabaseProvider: sqlite
        ConnectionStrings__Default: "Data Source=:memory:"
        
        # Email configuration (use MailHog)
        Email__SmtpServer: localhost
        Email__SmtpPort: 1025
        Email__Username: test@example.com
        Email__Password: test
        Email__From: test@databox.com
        Email__Ssl: false
        
        # Databox configuration
        Databox__SubmissionMail__SendTo: recipient@example.com
        Databox__SubmissionMail__Subject: "[DataBox Test] New documents Received"
        Databox__VerificationMail__Subject: "[DataBox Test] Your Databox submission"
        Databox__TempFileStoragePath: ./uploads/
        
        # App configuration
        App__BaseUrl: http://localhost:5000/
        
        # Playwright configuration
        BASE_URL: http://localhost:5000
        CI: true
      run: npx playwright test --project=${{ matrix.browser }}

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: tests/e2e/playwright-report/
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}
        path: tests/e2e/test-results/
        retention-days: 30

    - name: Upload screenshots and videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-artifacts-${{ matrix.browser }}
        path: |
          tests/e2e/test-results/
          tests/e2e/playwright-report/
        retention-days: 30

  # Job to run mobile tests separately
  mobile-e2e-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache node modules
      uses: actions/cache@v4
      with:
        path: tests/e2e/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('tests/e2e/package-lock.json', 'tests/e2e/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Restore .NET dependencies
      run: dotnet restore

    - name: Build .NET application
      run: dotnet build --no-restore

    - name: Install E2E test dependencies
      working-directory: tests/e2e
      run: |
        # Generate package-lock.json if it doesn't exist, otherwise use npm ci
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, running npm install"
          npm install
        else
          echo "package-lock.json found, running npm ci"
          npm ci
        fi

    - name: Install Playwright browsers
      working-directory: tests/e2e
      run: npx playwright install --with-deps chromium

    - name: Setup test environment
      run: |
        mkdir -p data uploads keys logs
        chmod 755 data uploads keys logs

    - name: Start MailHog
      run: |
        wget -q https://github.com/mailhog/MailHog/releases/download/v1.0.1/MailHog_linux_amd64
        chmod +x MailHog_linux_amd64
        ./MailHog_linux_amd64 &
        sleep 2

    - name: Run Mobile Playwright tests
      working-directory: tests/e2e
      env:
        ASPNETCORE_ENVIRONMENT: Testing
        ASPNETCORE_URLS: http://localhost:5000
        ConnectionStrings__DatabaseProvider: sqlite
        ConnectionStrings__Default: "Data Source=:memory:"
        Email__SmtpServer: localhost
        Email__SmtpPort: 1025
        Email__Username: test@example.com
        Email__Password: test
        Email__From: test@databox.com
        Email__Ssl: false
        Databox__SubmissionMail__SendTo: recipient@example.com
        Databox__TempFileStoragePath: ./uploads/
        App__BaseUrl: http://localhost:5000/
        BASE_URL: http://localhost:5000
        CI: true
      run: npx playwright test --project="Mobile Chrome" --project="Mobile Safari"

    - name: Upload Mobile test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: |
          tests/e2e/test-results/
          tests/e2e/playwright-report/
        retention-days: 30

  # Job to merge and publish test reports
  publish-results:
    if: always()
    needs: [e2e-tests, mobile-e2e-tests]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Merge test reports
      run: |
        mkdir -p merged-reports
        # Look for JUnit XML files in test results
        find artifacts -name "*.xml" -type f -exec cp {} merged-reports/ \; 2>/dev/null || true
        # Look for JSON results files
        find artifacts -name "results.json" -type f -exec cp {} merged-reports/ \; 2>/dev/null || true
        # List what we found
        echo "Found test report files:"
        ls -la merged-reports/ || echo "No test report files found"

    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let testSummary = '## üß™ E2E Test Results\n\n';
          
          try {
            // Check for artifacts directory
            const artifactsDir = 'artifacts';
            if (!fs.existsSync(artifactsDir)) {
              testSummary += '‚ö†Ô∏è No test artifacts found.\n';
            } else {
              // Check browser test results
              const browsers = ['chromium', 'firefox', 'webkit'];
              let hasResults = false;
              
              for (const browser of browsers) {
                const reportDir = path.join(artifactsDir, `playwright-report-${browser}`);
                const testResultsDir = path.join(artifactsDir, `test-results-${browser}`);
                
                if (fs.existsSync(reportDir) || fs.existsSync(testResultsDir)) {
                  testSummary += `### ${browser.charAt(0).toUpperCase() + browser.slice(1)}\n`;
                  testSummary += `‚úÖ Tests completed\n\n`;
                  hasResults = true;
                } else {
                  testSummary += `### ${browser.charAt(0).toUpperCase() + browser.slice(1)}\n`;
                  testSummary += `‚ùå Tests failed or incomplete\n\n`;
                }
              }
              
              // Check mobile results
              const mobileDir = path.join(artifactsDir, 'mobile-test-results');
              if (fs.existsSync(mobileDir)) {
                testSummary += '### Mobile Tests\n‚úÖ Mobile tests completed\n\n';
                hasResults = true;
              } else {
                testSummary += '### Mobile Tests\n‚ùå Mobile tests failed or incomplete\n\n';
              }
              
              if (hasResults) {
                testSummary += 'üìä **View detailed reports in the workflow artifacts**\n';
                testSummary += '- HTML reports with screenshots and traces\n';
                testSummary += '- Test execution videos (on failures)\n';
                testSummary += '- Performance metrics and timing data\n';
              }
            }
            
            testSummary += `\n---\n*Workflow run: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})*`;
            
            // Comment on PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });
            
          } catch (error) {
            console.log('Error creating PR comment:', error);
            
            // Fallback comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üß™ E2E Test Results\n\n‚ö†Ô∏è Unable to parse test results, but tests have completed.\n\nCheck the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed results.`
            });
          }